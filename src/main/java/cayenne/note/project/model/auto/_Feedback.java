package cayenne.note.project.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import cayenne.note.project.model.CarModel;

/**
 * Class _Feedback was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Feedback extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> FEEDBACK = PropertyFactory.createString("feedback", String.class);
    public static final EntityProperty<CarModel> CAR_MODEL = PropertyFactory.createEntity("carModel", CarModel.class);

    protected String feedback;

    protected Object carModel;

    public void setFeedback(String feedback) {
        beforePropertyWrite("feedback", this.feedback, feedback);
        this.feedback = feedback;
    }

    public String getFeedback() {
        beforePropertyRead("feedback");
        return this.feedback;
    }

    public void setCarModel(CarModel carModel) {
        setToOneTarget("carModel", carModel, true);
    }

    public CarModel getCarModel() {
        return (CarModel)readProperty("carModel");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "feedback":
                return this.feedback;
            case "carModel":
                return this.carModel;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "feedback":
                this.feedback = (String)val;
                break;
            case "carModel":
                this.carModel = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.feedback);
        out.writeObject(this.carModel);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.feedback = (String)in.readObject();
        this.carModel = in.readObject();
    }

}
