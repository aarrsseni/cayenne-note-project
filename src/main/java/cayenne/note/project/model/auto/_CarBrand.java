package cayenne.note.project.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import cayenne.note.project.model.CarModel;

/**
 * Class _CarBrand was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CarBrand extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final StringProperty<String> COUNTRY = PropertyFactory.createString("country", String.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final ListProperty<CarModel> CAR_MODELS = PropertyFactory.createList("carModels", CarModel.class);

    protected String country;
    protected String name;

    protected Object carModels;

    public void setCountry(String country) {
        beforePropertyWrite("country", this.country, country);
        this.country = country;
    }

    public String getCountry() {
        beforePropertyRead("country");
        return this.country;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToCarModels(CarModel obj) {
        addToManyTarget("carModels", obj, true);
    }

    public void removeFromCarModels(CarModel obj) {
        removeToManyTarget("carModels", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CarModel> getCarModels() {
        return (List<CarModel>)readProperty("carModels");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "country":
                return this.country;
            case "name":
                return this.name;
            case "carModels":
                return this.carModels;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "country":
                this.country = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "carModels":
                this.carModels = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.country);
        out.writeObject(this.name);
        out.writeObject(this.carModels);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.country = (String)in.readObject();
        this.name = (String)in.readObject();
        this.carModels = in.readObject();
    }

}
